plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}


android {
    def geo = "CityWeather"

    def versionMajor = 1
    def versionMinor = 0
    def versionPatch = 0
    def versionPatchInternal = 0

    compileSdk 32

    defaultConfig {
        applicationId "com.example.cityweather"
        minSdk 21
        targetSdk 32
        versionName "${geo}-${versionMajor}.${versionMinor}.${versionPatch}.${versionPatchInternal}"
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "BASE_URL", "\"" + getBaseUrl() + "\""
        buildConfigField "String", "APP_ID", "\"" + getAppId() + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "server"
    def version = "${geo}-${versionMajor}.${versionMinor}.${versionPatch}.${versionPatchInternal}"


    productFlavors {

        dev {
            dimension "server"
            applicationIdSuffix ".dev"
            archivesBaseName = "CityWeather-$version"
            buildConfigField "String", "BASE_URL", "\"" + getBaseUrl() + "\""
            buildConfigField "String", "APP_ID", "\"" + getAppId() + "\""
            buildConfigField('String', 'PORT', '""')
            buildConfigField('String', 'CERTIFICATE_PIN', '""')

        }
        sit {
            dimension "server"
            applicationId "com.example.cityweather"
            archivesBaseName = "CityWeather-$version"
            buildConfigField "String", "BASE_URL", "\"" + getBaseUrl() + "\""
            buildConfigField "String", "APP_ID", "\"" + getAppId() + "\""
            buildConfigField('String', 'PORT', '""')
            buildConfigField('String', 'CERTIFICATE_PIN', '""')
        }
        uat {
            dimension "server"
            applicationId "com.example.cityweather"
            archivesBaseName = "CityWeather-$version"
            buildConfigField "String", "BASE_URL", "\"" + getBaseUrl() + "\""
            buildConfigField "String", "APP_ID", "\"" + getAppId() + "\""
            buildConfigField('String', 'CERTIFICATE_PIN', '""')
            buildConfigField('String', 'PORT', '""')
            buildConfigField('boolean', 'ENABLE_ROOT_DETECTION', 'true')
        }
        prod {
            dimension "server"
            archivesBaseName = "CityWeather-$version"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.1.0"

    // network call related libraries
    implementation 'com.squareup.retrofit2:retrofit:2.9.0' // REST API calling library
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0' // JSON parsing library
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'

    // glide image loading library
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
}
def getBaseUrl() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    String baseUrl = properties.getProperty("base_url")
    //return "https://samples.openweathermap.org/data/2.5/"
    return baseUrl
}

def getAppId() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    String appId = properties.getProperty("app_id")
    return appId
}